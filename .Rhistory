m_nmar1 = m_nmar2 = NULL
for (j in 1:5){
for (i in 1:ds.num){
m_mar1 <- c(m_mar1,sample(mar1.list))
m_mar2 <- c(m_mar2,sample(mar2.list))
y2 <- dt$y2[dt$m_type==j & dt$ds==i];#y2.q15 = sort(y2)[n.miss]#quantile(y2,probs=0.15)
y3 <- dt$y3[dt$m_type==j & dt$ds==i];#y3.q15 = sort(y3)[n.miss]#quantile(y3,probs=0.15);y3.q15.2 = sort(y3[y2>y2.q15])[n.miss2]#quantile(y3[y2>y2.q15],probs=0.15)
#m_nmar1 <- c(m_nmar1,2 + (y3>y3.q15))
#m_nmar2 <- c(m_nmar2,1 + (y2>y2.q15) + ((y2>y2.q15)&(y3>y3.q15.2)))
m_nmar1 <- c(m_nmar1, 3 - get.miss.inds(y3))
p3.miss = p2.miss <- get.miss.inds(y2);
p3.miss[p2.miss==0] <- get.miss.inds(y3[p2.miss==0])
m_nmar2 <- c(m_nmar2, 3-(p2.miss + p3.miss))
}
}
m=c(rep(3,ds.num*n),m_mar1[(ds.num*n+1):(2*ds.num*n)],
m_mar2[(2*ds.num*n+1):(3*ds.num*n)], m_nmar1[(3*ds.num*n+1):(4*ds.num*n)],
m_nmar2[(4*ds.num*n+1):(5*ds.num*n)])
dt <- dt %>% dplyr::mutate(m=m)
return(dt)
}
Omega <- matrix(data=c(1743.85,0.04782,-617.64,
0.04782,712.85,-200.42,
-617.64,-200.42,1359.85),nrow=3,ncol=3,byrow=T)
dt1 <- get.data.3p(n=54*2, seed=2019,Omega=Omega)
rep(1:5,each=5)
get.data.3p <- function(n,seed,Omega,ds.num=500,vars=vars.3p,
muA=20.4481,muB=-0.9357,muC=22.8724,
ccp1=5.4076,ccp2=2.8629,ccp3=-1.6158,ccp5=1.6961,
ccp6=2.4362,ccp7=-0.7144,ccp8=-6.2358,ccp9=0.1664,
g4=10.6451,g5=-5.1948,g6=3.7375,g7=7.7886,
g8=-14.1653,g9=-6.7783,g10=4.7880,g11=1.4031,
g12=1.0021,g13=5.2271,g14=-2.7271,g15=-7.4408,
g16=1.7415,g17=0.06652,g18=1.0031){
#get.data.3p generates simulation data for 3-period TALC trial.
#n is sample size. Omega is var-cov matrix of [bA bB bC]
#step 1: generate bA bB bC for 3-period complete data in TALC.
set.seed(seed)
A <- t(chol(Omega))
dt <- data.frame(round(t(A%*%matrix(rnorm(3*n*ds.num*5,mean=0,sd=1),
nrow=3,ncol=n*ds.num*5,byrow=F)),4))
colnames(dt) <- c("bA","bB","bC")
dt$subj = rep(1:n,ds.num*5)
dt$ds = rep(rep(1:ds.num,each=n),5)
dt$n = n
#step 2: add all covariates
dt <- cbind(dt,apply(vars, 2, rep, 5*n/54*ds.num))
#step 3: generate outcomes using estimates from shared-parameter model
#3 constraints;
g1 = -(g4+g8+g12+g14+g18);
g2 = -(g6+g7+g10+g15+g17);
g3 = -(g5+g9+g11+g13+g16);
dt <- dt %>%
dplyr::mutate(mu1 = tA1*muA + tB1*muB + tC1*muC,mu2 = tA2*muA + tB2*muB + tC2*muC,
mu3 = tA3*muA + tB3*muB + tC3*muC,cc = ccp1*center1 + ccp2*center2 + ccp3*center3 + ccp5*center5 + ccp6*center6 + ccp7*center7 + ccp8*center8 + ccp9*center9,
b1 = tA1*bA + tB1*bB + tC1*bC,b2 = tA2*bA + tB2*bB + tC2*bC,
b3 = tA3*bA + tB3*bB + tC3*bC,
XB1 = g1*i1_1 + g4*i4_1 + g7*i7_1 + g10*i10_1 + g13*i13_1 + g16*i16_1,
XB2 = g2*i2_2 + g5*i5_2 + g8*i8_2 + g11*i11_2 + g14*i14_2 + g17*i17_2,
XB3 = g3*i3_3 + g6*i6_3 + g9*i9_3 + g12*i12_3 + g15*i15_3 + g18*i18_3,
y1 = mu1 + b1 + XB1 + cc, y2 = mu2 + b2 + XB2 + cc,
y3 = mu3 + b3 + XB3 + cc) %>%
dplyr::select(-mu1,-mu2,-mu3,-b1,-b2,-b3,-XB1,-XB2,-XB3,-cc,-bA,-bB,-bC)
dt$m_type <- rep(1:5,each=n*ds.num)
#step 4: generate data for missing
n.miss <- round(0.15*n);n.miss2 <- round((1-0.15)*0.15*n)
m_mar1 = m_mar2 = NULL
mar1.list <- c(rep(2,n.miss),rep(3,n-n.miss))
mar2.list <- c(rep(1,n.miss),rep(2,n.miss2),rep(3,n-n.miss-n.miss2))
m_nmar1 = m_nmar2 = NULL
for (j in 1:5){
for (i in 1:ds.num){
m_mar1 <- c(m_mar1,sample(mar1.list))
m_mar2 <- c(m_mar2,sample(mar2.list))
y2 <- dt$y2[dt$m_type==j & dt$ds==i];#y2.q15 = sort(y2)[n.miss]#quantile(y2,probs=0.15)
y3 <- dt$y3[dt$m_type==j & dt$ds==i];#y3.q15 = sort(y3)[n.miss]#quantile(y3,probs=0.15);y3.q15.2 = sort(y3[y2>y2.q15])[n.miss2]#quantile(y3[y2>y2.q15],probs=0.15)
#m_nmar1 <- c(m_nmar1,2 + (y3>y3.q15))
#m_nmar2 <- c(m_nmar2,1 + (y2>y2.q15) + ((y2>y2.q15)&(y3>y3.q15.2)))
m_nmar1 <- c(m_nmar1, 3 - get.miss.inds(y3))
p3.miss = p2.miss <- get.miss.inds(y2);
p3.miss[p2.miss==0] <- get.miss.inds(y3[p2.miss==0])
m_nmar2 <- c(m_nmar2, 3-(p2.miss + p3.miss))
}
}
m=c(rep(3,ds.num*n),m_mar1[(ds.num*n+1):(2*ds.num*n)],
m_mar2[(2*ds.num*n+1):(3*ds.num*n)], m_nmar1[(3*ds.num*n+1):(4*ds.num*n)],
m_nmar2[(4*ds.num*n+1):(5*ds.num*n)])
dt <- dt %>% dplyr::mutate(m=m)
return(dt)
}
Omega <- matrix(data=c(1743.85,0.04782,-617.64,
0.04782,712.85,-200.42,
-617.64,-200.42,1359.85),nrow=3,ncol=3,byrow=T)
dt1 <- get.data.3p(n=54*2, seed=2019,Omega=Omega)
dt2 <- get.data.3p(n=54*3, seed=2020,Omega=Omega)
dt3 <- get.data.3p(n=54*4, seed=2021,Omega=Omega)
dt <- rbind(dt1,dt2,dt3)
#check
plot(dt1$y3[m_type==5 & n==108 & ds==3],dt1$m[m_type==5 & n==108 & ds==3])
#check
plot(dt1$y3[dt1$m_type==5 & dt1$n==108 & dt1$ds==3],dt1$m[dt1$m_type==5 & dt1$n==108 & dt1$ds==3])
plot(dt1$y3[dt1$m_type==4 & dt1$n==108 & dt1$ds==3],dt1$m[dt1$m_type==4 & dt1$n==108 & dt1$ds==3])
plot(dt1$y2[dt1$m_type==4 & dt1$n==108 & dt1$ds==3],dt1$m[dt1$m_type==4 & dt1$n==108 & dt1$ds==3])
plot(dt1$y2[dt1$m_type==5 & dt1$n==108 & dt1$ds==3],dt1$m[dt1$m_type==5 & dt1$n==108 & dt1$ds==3])
View(dt2)
test <- dt2[dt1$m_type==5 & dt2$n==54*3 & dt1$ds==3,]
test <- dt2[dt2$n==54*3 & dt2$ds==3,]
View(test)
filename = "H:\\research\\NMAR\\data\\TALC_trial\\sim_3p.csv"
write.csv(dt,filename,row.names=F)
drug_seq <- rep(1:6,9)
trts <- matrix(c(c(1,0,0, 0,1,0, 0,0,1),
c(1,0,0, 0,0,1, 0,1,0),
c(0,1,0, 1,0,0, 0,0,1),
c(0,0,1, 1,0,0, 0,1,0),
c(0,1,0, 0,0,1, 1,0,0),
c(0,0,1, 0,1,0, 1,0,0)),nrow=6,ncol=9,byrow=T)
colnames(trts) = c("tA1","tA2","tA3","tB1","tB2","tB3","tC1","tC2","tC3")
seq_period <- matrix(1:24,nrow=6,ncol=4,byrow=T)
colnames(seq_period) = c("ip1","ip2","ip3","ip4")
inds <- fastDummies::dummy_cols(seq_period,select_columns = c("ip1","ip2","ip3","ip4"))
colnames(inds) <- c(rep("org",4),paste0("i",c(1,5,9,13,17,21,
2,6,10,14,18,22,
3,7,11,15,19,23,
4,8,12,16,20,24),"_",rep(1:4,each=6)))
center <- rep(1:9,each=6)
centers <-  fastDummies::dummy_cols(center)
colnames(centers) <- paste0("center",0:9)
centers[centers$center4==1,2:10] <- -1
vars.4p <-cbind(drug_seq,apply(trts, 2, rep, 9),apply(inds[,5:28], 2, rep, 9),centers[,c(2:4,6:10)])
get.data.4p <- function(n,seed,Omega,sigma,ds.num=500,vars=vars.4p,
muA=24.7999,muB=-1.9410,muC=24.1380,
ccp1=5.3176,ccp2=2.8170,ccp3=-1.8364,ccp5=-0.2337,
ccp6=2.7677,ccp7=0.1664,ccp8=-6.6779,ccp9=-0.2236,
g4=7.9429,g5=-3.2472,g6=-6.4148,g7=3.6258,
g8=3.2475,g9=8.3003,g10=-20.6360,g11=2.8896,
g12=-2.5599,g13=7.7101,g14=-6.5298,g15=6.6228,
g16=7.7365,g17=3.6675,g18=-11.6903,g19=-8.3955,
g20=-9.6405,g21=-6.4259,g22=1.7926,g23=14.2196,
g24=13.7654){
#get.data.3p generates simulation data for 4-period TALC trial.
#n is sample size.
#Omega is var-cov matrix of [bA bB bC].
#sigma is std for random error epsilon. = (sqrt(sigma2A), sqrt(sigma2B),sqrt(sigma2C))
#step 1: generate bA bB bC for 4-period complete data in TALC.
set.seed(seed)
A <- t(chol(Omega))
dt <- data.frame(round(t(A%*%matrix(rnorm(3*n*ds.num*7,mean=0,sd=1),
nrow=3,ncol=n*ds.num*7,byrow=F)),4),
round(matrix(rnorm(6*n*ds.num*7,mean=0,sd=rep(rep(sigma,each=2),n*ds.num*7)),
nrow=n*ds.num*7,ncol=6,byrow=T),4))
colnames(dt) <- c("bA","bB","bC","sA1","sA2","sB1","sB2","sC1","sC2")
dt$subj = rep(1:n,ds.num*7)
dt$ds = rep(rep(1:ds.num,each=n),7)
dt$n = n
#step 2: add all covariates
dt <- cbind(dt,apply(vars, 2, rep, 7*n/54*ds.num))
#step 3: generate outcomes using estimates from shared-parameter model
#3 constraints;
g1 = -(g5+g10+g15+g16+g18+g23+g24);
g2 = -(g7+g8+g9+g13+g19+g20+g22);
g3 = -(g4+g6+g11+g12+g14+g17+g21);
dt <- dt %>%
dplyr::mutate(mu1 = tA1*muA + tB1*muB + tC1*muC,mu2 = tA2*muA + tB2*muB + tC2*muC,
mu3 = tA3*muA + tB3*muB + tC3*muC,cc = ccp1*center1 + ccp2*center2 + ccp3*center3 + ccp5*center5 + ccp6*center6 + ccp7*center7 + ccp8*center8 + ccp9*center9,
b1 = tA1*bA + tB1*bB + tC1*bC,b2 = tA2*bA + tB2*bB + tC2*bC,
b3 = tA3*bA + tB3*bB + tC3*bC,
s1 = tA1*sA1 + tB1*sB1 + tC1*sC1,s2 = tA2*sA1 + tB2*sB1 + tC2*sC1,
s3 = tA3*sA1 + tB3*sB1 + tC3*sC1,s4 = tA3*sA2 + tB3*sB2 + tC3*sC2,
XB1 = g1*i1_1 + g5*i5_1 + g9*i9_1 + g13*i13_1 + g17*i17_1 + g21*i21_1,
XB2 = g2*i2_2 + g6*i6_2 + g10*i10_2 + g14*i14_2 + g18*i18_2 + g22*i22_2,
XB3 = g3*i3_3 + g7*i7_3 + g11*i11_3 + g15*i15_3 + g19*i19_3 + g23*i23_3,
XB4 = g4*i4_4 + g8*i8_4 + g12*i12_4 + g16*i16_4 + g20*i20_4 + g24*i24_4,
y1 = mu1 + b1 + s1 + XB1 + cc, y2 = mu2 + b2 + s2 + XB2 + cc,
y3 = mu3 + b3 + s3 + XB3 + cc, y4 = mu3 + b3 + s4 + XB4 + cc) %>%
dplyr::select(-mu1,-mu2,-mu3,-b1,-b2,-b3,-XB1,-XB2,-XB3,-XB4,-cc,-bA,-bB,-bC,-s1,-s2,-s3,-s4)
dt$m_type <- rep(1:7,each=n*ds.num)
#step 4: generate data for missing
n.miss <- round(0.15*n);n.miss2 <- round((1-0.15)*0.15*n);
n.miss3 <- round((1-0.15)*(1-0.15)*0.15*n)
m_mar1 = m_mar2 = m_mar3 = NULL
mar1.list <- c(rep(3,n.miss),rep(4,n-n.miss))
mar2.list <- c(rep(2,n.miss),rep(3,n.miss2),rep(4,n-n.miss-n.miss2))
mar3.list <- c(rep(1,n.miss),rep(2,n.miss2),rep(3,n.miss3),rep(4,n-n.miss-n.miss2-n.miss3))
m_nmar1 = m_nmar2 = m_nmar3 = NULL
for (j in 1:7){
for (i in 1:ds.num){
m_mar1 <- c(m_mar1,sample(mar1.list))
m_mar2 <- c(m_mar2,sample(mar2.list))
m_mar3 <- c(m_mar3,sample(mar3.list))
y2 <- dt$y2[dt$m_type==j & dt$ds==i];#y2.q15 = sort(y2)[n.miss]
y3 <- dt$y3[dt$m_type==j & dt$ds==i];#y3.q15 = sort(y3)[n.miss];y3.q15.2 = sort(y3[y2>y2.q15])[n.miss2]
y4 <- dt$y4[dt$m_type==j & dt$ds==i];#y4.q15 = sort(y4)[n.miss]; y4.q15.2 = sort(y4[y3>y3.q15])[n.miss2];y4.q15.3 = sort(y4[(y2>y2.q15) & (y3>y3.q15.2)])[n.miss3]
### Old method of generating NMAR data, set ys with 15% lowest values to be missing,
# Comment: too strong, simulation performs bad
#m_nmar1 <- c(m_nmar1,3 + (y4>y4.q15))
#m_nmar2 <- c(m_nmar2,2 + (y3>y3.q15) + ((y3>y3.q15)&(y4>y4.q15.2)))
#m_nmar3 <- c(m_nmar3,1 + (y2>y2.q15) + ((y2>y2.q15)&(y3>y3.q15.2)) + ((y2>y2.q15)&(y3>y3.q15.2)&(y4>y4.q15.3)))
m_nmar1 <- c(m_nmar1, 4 - get.miss.inds(y4))
p4.miss = p3.miss <- get.miss.inds(y3);
p4.miss[p3.miss==0] <- get.miss.inds(y4[p3.miss==0])
m_nmar2 <- c(m_nmar2, 4-(p3.miss + p4.miss))
p3.miss = p2.miss <- get.miss.inds(y2);
p3.miss[p2.miss==0] <- get.miss.inds(y3[p2.miss==0])
p4.miss = p3.miss; p4.miss[p3.miss==0] <- get.miss.inds(y4[p3.miss==0])
m_nmar3 <- c(m_nmar3, 4-(p2.miss + p3.miss + p4.miss))
}
}
m=c(rep(4,ds.num*n),m_mar1[(ds.num*n+1):(2*ds.num*n)],
m_mar2[(2*ds.num*n+1):(3*ds.num*n)], m_mar2[(3*ds.num*n+1):(4*ds.num*n)],
m_nmar1[(4*ds.num*n+1):(5*ds.num*n)], m_nmar2[(5*ds.num*n+1):(6*ds.num*n)],
m_nmar3[(6*ds.num*n+1):(7*ds.num*n)])
dt <- dt %>% dplyr::mutate(m=m)
return(dt)
}
Omega.4p <- matrix(data=c(1828.82,0.5735,-674.09,
0.5735,722.90,-206.34,
-674.09,-206.34,1428.53),nrow=3,ncol=3,byrow=T)
sigma <- c(sqrt(2.2717),sqrt(12.2985),sqrt(18.3468))
dt1 <- get.data.4p(n=54*2, seed=2022,Omega=Omega.4p,sigma=sigma)
dt2 <- get.data.4p(n=54*3, seed=2023,Omega=Omega.4p,sigma=sigma)
dt3 <- get.data.4p(n=54*4, seed=2024,Omega=Omega.4p,sigma=sigma)
dt.4p <- rbind(dt1,dt2,dt3)
filename = "H:\\research\\NMAR\\data\\TALC_trial\\sim_4p.csv"
write.csv(dt.4p,filename,row.names=F)
miss.ind <- c(1,1,0,0,0)
(1:5)[miss.ind==0]
c <- 1:5
c[miss.ind==0]<- c(6,6,6)
c
get.miss.inds <- function(ys,beta=0.3,p.miss=0.13){
# function get.miss.inds is used to generate missing indicator for vector ys
# step 1: find alpha such that the mean of missing probability of vector ys is p
alpha <- uniroot(function(alpha.x) mean(1/(1+exp(alpha.x+beta*ys)))-p.miss, c(-1e16, 1e16), tol=.Machine$double.eps^0.5)$root
# step 2: generate missing probability for each individual
miss.probs <- 1/(1+exp(alpha+0.5*ys))
miss.inds <- sapply(miss.probs,function(probs) rbinom(1,1,probs))
#print(alpha)
return(miss.inds)
}
drug_seq <- rep(1:6,9)
trts <- matrix(c(c(1,0,0, 0,1,0, 0,0,1),
c(1,0,0, 0,0,1, 0,1,0),
c(0,1,0, 1,0,0, 0,0,1),
c(0,0,1, 1,0,0, 0,1,0),
c(0,1,0, 0,0,1, 1,0,0),
c(0,0,1, 0,1,0, 1,0,0)),nrow=6,ncol=9,byrow=T)
colnames(trts) = c("tA1","tA2","tA3","tB1","tB2","tB3","tC1","tC2","tC3")
seq_period <- matrix(1:18,nrow=6,ncol=3,byrow=T)
colnames(seq_period) = c("ip1","ip2","ip3")
inds <- fastDummies::dummy_cols(seq_period,select_columns = c("ip1","ip2","ip3"))
colnames(inds) <- c(rep("org",3),paste0("i",c(1,4,7,10,13,16,
2,5,8,11,14,17,
3,6,9,12,15,18),"_",rep(1:3,each=6)))
center <- rep(1:9,each=6)
centers <-  fastDummies::dummy_cols(center)
colnames(centers) <- paste0("center",0:9)
centers[centers$center4==1,2:10] <- -1
vars.3p <-cbind(drug_seq,apply(trts, 2, rep, 9),apply(inds[,4:21], 2, rep, 9),centers[,c(2:4,6:10)])
get.data.3p <- function(n,seed,Omega,ds.num=500,vars=vars.3p,
muA=20.4481,muB=-0.9357,muC=22.8724,
ccp1=5.4076,ccp2=2.8629,ccp3=-1.6158,ccp5=1.6961,
ccp6=2.4362,ccp7=-0.7144,ccp8=-6.2358,ccp9=0.1664,
g4=10.6451,g5=-5.1948,g6=3.7375,g7=7.7886,
g8=-14.1653,g9=-6.7783,g10=4.7880,g11=1.4031,
g12=1.0021,g13=5.2271,g14=-2.7271,g15=-7.4408,
g16=1.7415,g17=0.06652,g18=1.0031){
#get.data.3p generates simulation data for 3-period TALC trial.
#n is sample size. Omega is var-cov matrix of [bA bB bC]
#step 1: generate bA bB bC for 3-period complete data in TALC.
set.seed(seed)
A <- t(chol(Omega))
dt <- data.frame(round(t(A%*%matrix(rnorm(3*n*ds.num*5,mean=0,sd=1),
nrow=3,ncol=n*ds.num*5,byrow=F)),4))
colnames(dt) <- c("bA","bB","bC")
dt$subj = rep(1:n,ds.num*5)
dt$ds = rep(rep(1:ds.num,each=n),5)
dt$n = n
#step 2: add all covariates
dt <- cbind(dt,apply(vars, 2, rep, 5*n/54*ds.num))
#step 3: generate outcomes using estimates from shared-parameter model
#3 constraints;
g1 = -(g4+g8+g12+g14+g18);
g2 = -(g6+g7+g10+g15+g17);
g3 = -(g5+g9+g11+g13+g16);
dt <- dt %>%
dplyr::mutate(mu1 = tA1*muA + tB1*muB + tC1*muC,mu2 = tA2*muA + tB2*muB + tC2*muC,
mu3 = tA3*muA + tB3*muB + tC3*muC,cc = ccp1*center1 + ccp2*center2 + ccp3*center3 + ccp5*center5 + ccp6*center6 + ccp7*center7 + ccp8*center8 + ccp9*center9,
b1 = tA1*bA + tB1*bB + tC1*bC,b2 = tA2*bA + tB2*bB + tC2*bC,
b3 = tA3*bA + tB3*bB + tC3*bC,
XB1 = g1*i1_1 + g4*i4_1 + g7*i7_1 + g10*i10_1 + g13*i13_1 + g16*i16_1,
XB2 = g2*i2_2 + g5*i5_2 + g8*i8_2 + g11*i11_2 + g14*i14_2 + g17*i17_2,
XB3 = g3*i3_3 + g6*i6_3 + g9*i9_3 + g12*i12_3 + g15*i15_3 + g18*i18_3,
y1 = mu1 + b1 + XB1 + cc, y2 = mu2 + b2 + XB2 + cc,
y3 = mu3 + b3 + XB3 + cc) %>%
dplyr::select(-mu1,-mu2,-mu3,-b1,-b2,-b3,-XB1,-XB2,-XB3,-cc,-bA,-bB,-bC)
dt$m_type <- rep(1:5,each=n*ds.num)
#step 4: generate data for missing
n.miss <- round(0.15*n);n.miss2 <- round((1-0.15)*0.15*n)
m_mar1 = m_mar2 = NULL
mar1.list <- c(rep(2,n.miss),rep(3,n-n.miss))
mar2.list <- c(rep(1,n.miss2),rep(2,n.miss),rep(3,n-n.miss-n.miss2))
m_nmar1 = m_nmar2 = NULL
for (j in 1:5){
for (i in 1:ds.num){
m_mar1 <- c(m_mar1,sample(mar1.list))
m_mar2 <- c(m_mar2,sample(mar2.list))
y2 <- dt$y2[dt$m_type==j & dt$ds==i];#y2.q15 = sort(y2)[n.miss]#quantile(y2,probs=0.15)
y3 <- dt$y3[dt$m_type==j & dt$ds==i];#y3.q15 = sort(y3)[n.miss]#quantile(y3,probs=0.15);y3.q15.2 = sort(y3[y2>y2.q15])[n.miss2]#quantile(y3[y2>y2.q15],probs=0.15)
#m_nmar1 <- c(m_nmar1,2 + (y3>y3.q15))
#m_nmar2 <- c(m_nmar2,1 + (y2>y2.q15) + ((y2>y2.q15)&(y3>y3.q15.2)))
m_nmar1 <- c(m_nmar1, 3 - get.miss.inds(y3))
p3.miss = p2.miss <- get.miss.inds(y2);
p3.miss[p2.miss==0] <- get.miss.inds(y3[p2.miss==0])
m_nmar2 <- c(m_nmar2, 3-(p2.miss + p3.miss))
}
}
m=c(rep(3,ds.num*n),m_mar1[(ds.num*n+1):(2*ds.num*n)],
m_mar2[(2*ds.num*n+1):(3*ds.num*n)], m_nmar1[(3*ds.num*n+1):(4*ds.num*n)],
m_nmar2[(4*ds.num*n+1):(5*ds.num*n)])
#m_type=1 for complete data, m_type=2 for mar1, m_type=3 for mar2,
#      m_type=4 for nmar1, m_type=5 for nmar2
dt <- dt %>% dplyr::mutate(m=m)
return(dt)
}
Omega <- matrix(data=c(1743.85,0.04782,-617.64,
0.04782,712.85,-200.42,
-617.64,-200.42,1359.85),nrow=3,ncol=3,byrow=T)
dt1 <- get.data.3p(n=54*2, seed=2019,Omega=Omega)
dt2 <- get.data.3p(n=54*3, seed=2020,Omega=Omega)
dt3 <- get.data.3p(n=54*4, seed=2021,Omega=Omega)
dt <- rbind(dt1,dt2,dt3)
5-c(1,1,1)-c(2,3,4)
get.miss.inds <- function(ys,beta=0.3,p.miss=0.13){
# function get.miss.inds is used to generate missing indicator for vector ys
# step 1: find alpha such that the mean of missing probability of vector ys is p
alpha <- uniroot(function(alpha.x) mean(1/(1+exp(alpha.x+beta*ys)))-p.miss, c(-1e16, 1e16), tol=.Machine$double.eps^0.5)$root
# step 2: generate missing probability for each individual
miss.probs <- 1/(1+exp(alpha+beta*ys))
miss.inds <- sapply(miss.probs,function(probs) rbinom(1,1,probs))
#print(alpha)
return(miss.inds)
}
drug_seq <- rep(1:6,9)
trts <- matrix(c(c(1,0,0, 0,1,0, 0,0,1),
c(1,0,0, 0,0,1, 0,1,0),
c(0,1,0, 1,0,0, 0,0,1),
c(0,0,1, 1,0,0, 0,1,0),
c(0,1,0, 0,0,1, 1,0,0),
c(0,0,1, 0,1,0, 1,0,0)),nrow=6,ncol=9,byrow=T)
colnames(trts) = c("tA1","tA2","tA3","tB1","tB2","tB3","tC1","tC2","tC3")
seq_period <- matrix(1:18,nrow=6,ncol=3,byrow=T)
colnames(seq_period) = c("ip1","ip2","ip3")
inds <- fastDummies::dummy_cols(seq_period,select_columns = c("ip1","ip2","ip3"))
colnames(inds) <- c(rep("org",3),paste0("i",c(1,4,7,10,13,16,
2,5,8,11,14,17,
3,6,9,12,15,18),"_",rep(1:3,each=6)))
center <- rep(1:9,each=6)
centers <-  fastDummies::dummy_cols(center)
colnames(centers) <- paste0("center",0:9)
centers[centers$center4==1,2:10] <- -1
vars.3p <-cbind(drug_seq,apply(trts, 2, rep, 9),apply(inds[,4:21], 2, rep, 9),centers[,c(2:4,6:10)])
get.data.3p <- function(n,seed,Omega,ds.num=500,vars=vars.3p,
muA=20.4481,muB=-0.9357,muC=22.8724,
ccp1=5.4076,ccp2=2.8629,ccp3=-1.6158,ccp5=1.6961,
ccp6=2.4362,ccp7=-0.7144,ccp8=-6.2358,ccp9=0.1664,
g4=10.6451,g5=-5.1948,g6=3.7375,g7=7.7886,
g8=-14.1653,g9=-6.7783,g10=4.7880,g11=1.4031,
g12=1.0021,g13=5.2271,g14=-2.7271,g15=-7.4408,
g16=1.7415,g17=0.06652,g18=1.0031){
#get.data.3p generates simulation data for 3-period TALC trial.
#n is sample size. Omega is var-cov matrix of [bA bB bC]
#step 1: generate bA bB bC for 3-period complete data in TALC.
set.seed(seed)
A <- t(chol(Omega))
dt <- data.frame(round(t(A%*%matrix(rnorm(3*n*ds.num*5,mean=0,sd=1),
nrow=3,ncol=n*ds.num*5,byrow=F)),4))
colnames(dt) <- c("bA","bB","bC")
dt$subj = rep(1:n,ds.num*5)
dt$ds = rep(rep(1:ds.num,each=n),5)
dt$n = n
#step 2: add all covariates
dt <- cbind(dt,apply(vars, 2, rep, 5*n/54*ds.num))
#step 3: generate outcomes using estimates from shared-parameter model
#3 constraints;
g1 = -(g4+g8+g12+g14+g18);
g2 = -(g6+g7+g10+g15+g17);
g3 = -(g5+g9+g11+g13+g16);
dt <- dt %>%
dplyr::mutate(mu1 = tA1*muA + tB1*muB + tC1*muC,mu2 = tA2*muA + tB2*muB + tC2*muC,
mu3 = tA3*muA + tB3*muB + tC3*muC,cc = ccp1*center1 + ccp2*center2 + ccp3*center3 + ccp5*center5 + ccp6*center6 + ccp7*center7 + ccp8*center8 + ccp9*center9,
b1 = tA1*bA + tB1*bB + tC1*bC,b2 = tA2*bA + tB2*bB + tC2*bC,
b3 = tA3*bA + tB3*bB + tC3*bC,
XB1 = g1*i1_1 + g4*i4_1 + g7*i7_1 + g10*i10_1 + g13*i13_1 + g16*i16_1,
XB2 = g2*i2_2 + g5*i5_2 + g8*i8_2 + g11*i11_2 + g14*i14_2 + g17*i17_2,
XB3 = g3*i3_3 + g6*i6_3 + g9*i9_3 + g12*i12_3 + g15*i15_3 + g18*i18_3,
y1 = mu1 + b1 + XB1 + cc, y2 = mu2 + b2 + XB2 + cc,
y3 = mu3 + b3 + XB3 + cc) %>%
dplyr::select(-mu1,-mu2,-mu3,-b1,-b2,-b3,-XB1,-XB2,-XB3,-cc,-bA,-bB,-bC)
dt$m_type <- rep(1:5,each=n*ds.num)
#step 4: generate data for missing
n.miss <- round(0.15*n);n.miss2 <- round((1-0.15)*0.15*n)
m_mar1 = m_mar2 = NULL
mar1.list <- c(rep(2,n.miss),rep(3,n-n.miss))
mar2.list <- c(rep(1,n.miss2),rep(2,n.miss),rep(3,n-n.miss-n.miss2))
m_nmar1 = m_nmar2 = NULL
for (j in 1:5){
for (i in 1:ds.num){
m_mar1 <- c(m_mar1,sample(mar1.list))
m_mar2 <- c(m_mar2,sample(mar2.list))
y2 <- dt$y2[dt$m_type==j & dt$ds==i];#y2.q15 = sort(y2)[n.miss]#quantile(y2,probs=0.15)
y3 <- dt$y3[dt$m_type==j & dt$ds==i];#y3.q15 = sort(y3)[n.miss]#quantile(y3,probs=0.15);y3.q15.2 = sort(y3[y2>y2.q15])[n.miss2]#quantile(y3[y2>y2.q15],probs=0.15)
#m_nmar1 <- c(m_nmar1,2 + (y3>y3.q15))
#m_nmar2 <- c(m_nmar2,1 + (y2>y2.q15) + ((y2>y2.q15)&(y3>y3.q15.2)))
m_nmar1 <- c(m_nmar1, 3 - get.miss.inds(y3))
p3.miss = p2.miss <- get.miss.inds(y2);
p3.miss[p2.miss==0] <- get.miss.inds(y3[p2.miss==0])
m_nmar2 <- c(m_nmar2, 3-(p2.miss + p3.miss))
}
}
m=c(rep(3,ds.num*n),m_mar1[(ds.num*n+1):(2*ds.num*n)],
m_mar2[(2*ds.num*n+1):(3*ds.num*n)], m_nmar1[(3*ds.num*n+1):(4*ds.num*n)],
m_nmar2[(4*ds.num*n+1):(5*ds.num*n)])
#m_type=1 for complete data, m_type=2 for mar1, m_type=3 for mar2,
#      m_type=4 for nmar1, m_type=5 for nmar2
dt <- dt %>% dplyr::mutate(m=m)
return(dt)
}
Omega <- matrix(data=c(1743.85,0.04782,-617.64,
0.04782,712.85,-200.42,
-617.64,-200.42,1359.85),nrow=3,ncol=3,byrow=T)
dt1 <- get.data.3p(n=54*2, seed=2019,Omega=Omega)
#check
plot(dt1$y3[dt1$m_type==5 & dt1$n==108 & dt1$ds==3],dt1$m[dt1$m_type==5 & dt1$n==108 & dt1$ds==3])
plot(dt1$y3[dt1$m_type==4 & dt1$n==108 & dt1$ds==3],dt1$m[dt1$m_type==4 & dt1$n==108 & dt1$ds==3])
plot(dt1$y2[dt1$m_type==5 & dt1$n==108 & dt1$ds==3],dt1$m[dt1$m_type==5 & dt1$n==108 & dt1$ds==3])
sapply(c(0,0,0,1,1,1),function(probs) rbinom(1,1,probs))
sapply(c(0,0,0,1,1,1,0.5),function(probs) rbinom(1,1,probs))
table(dt1$m[dt1$m_type==5])
get.miss.inds <- function(ys,beta=0.3,p.miss=0.13){
# function get.miss.inds is used to generate missing indicator for vector ys
# step 1: find alpha such that the mean of missing probability of vector ys is p
alpha <- uniroot(function(alpha.x) mean(1/(1+exp(alpha.x+beta*ys)))-p.miss, c(-1e16, 1e16), tol=.Machine$double.eps^0.5)$root
# step 2: generate missing probability for each individual
miss.probs <- 1/(1+exp(alpha+beta*ys))
miss.inds <- sapply(miss.probs,function(probs) rbinom(1,1,probs))
#print(alpha)
return(miss.inds)
}
library(haven)#read_sas
#library("Survfit")
library("dplyr")
library(rms)
library("Hmisc") #use function units
library(fastDummies) #create dummy variables
library(haven)#read_sas
#library("Survfit")
library("dplyr")
library(rms)
library("Hmisc") #use function units
library(fastDummies) #create dummy variables
##############################################
# Dataset: SEER
##############################################
seer <- read_sas("H:/research/Zaorsky NG - SEER Metastatic NOMOGRAM/Zaorsky NG - SEER Metastatic NOMOGRAM/data/SEER_prostate_new/seer_prostate_survival.sas7bdat",NULL)
seer <- seer %>% mutate(bone_only=factor(bone_only,
labels=c("any other metastatic","bone only","no metastatic in 4 sites")),
ssf7=factor(ssf7), T_stage=factor(T_stage),N_stage=factor(N_stage),
race=factor(race), ssf1_cat=factor(ssf1_cat), age_cat=factor(age_cat))%>%
select(time_to_death,censor,bone_only,T_stage,N_stage,race,ssf1_cat,ssf7,age_cat)
var.labels = c(time_to_death="Time to death (months)",censor="Censor",
bone_only="Metastatic pattern",T_stage="T stage",N_stage="N stage",
race="Race", ssf1_cat="PSA (ng/mL)",
ssf7="Gleason Grade Group",age_cat="Age (Years)")
label(seer)=lapply(names(var.labels),
function(x) label(seer[,x]) = var.labels[x])
seer$bone_only = relevel(seer$bone_only, ref = "no metastatic in 4 sites")
seer$T_stage = relevel(seer$T_stage, ref = "T1")
seer$N_stage = relevel(seer$N_stage, ref = "N0")
seer$race = relevel(seer$race, ref = "White")
seer$ssf7 = relevel(seer$ssf7, ref = "1")
seer$ssf1_cat = relevel(seer$ssf1_cat, ref = "<10")
seer$age_cat = relevel(seer$age_cat, ref = "<50")
get.internal.valid <- function(formula,TR.data,
B.num=200,seed=2019){
#Function get.internal.valid generates a Harrell's C-index of internal validation.
# input formula is a formula specifying a Cox PH model, see cph function.
# TR.data is the training dataset name
# relation between Dxy and C-index: Dxy=2*(C-0.5).
#formula=eval(formula)
valid.cox <- cph(formula,TR.data,
surv=TRUE,x=TRUE, y=TRUE, time.inc=0.5)
valid <- validate(valid.cox, method="boot", dxy=TRUE, B=B.num)
Dxy <- valid["Dxy","index.corrected"]
C.index = 0.5 + Dxy/2
return(C.index)
}
#implementation example
get.internal.valid(Surv(time_to_death,censor) ~ bone_only+
T_stage+N_stage+race+ssf1_cat+ssf7+age_cat,seer,B.num=2)
#generate documentation
setwd("C:\\Users\\xwang16.PHS\\Documents\\nomovalidation")
document()
#install.packages("devtools")
library("devtools")
#devtools::install_github("klutometis/roxygen")
library(roxygen2)
document()
document()
document()
sessioninfo
sessionInfo()
